stages:
  - build
  - quality_assurance
  - registry
  - deploy
  - cleanup

.docker-credentials: &docker-credentials
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY 

build:
  stage: build
  image: docker
  services:
    - docker:dind
  tags:
    - docker-runner
  script:
    - docker build -t $CI_REGISTRY_IMAGE ./app/.


frontend-lint:
  stage: quality_assurance
  image: docker
  services:
    - docker:dind
  tags:
    - docker-runner
  before_script: *docker-credentials
  script:
    - docker build -t frontend_test --target frontend_test ./app/.
    - docker run --name frontend_test frontend_test npm run lint
    - docker rm frontend_test
    - docker rmi frontend_test

backend-lint:
  stage: quality_assurance
  image: docker
  services:
    - docker:dind
  tags:
    - docker-runner
  before_script: *docker-credentials
  script:
    - docker build -t backend_test --target backend_test ./app/.
    - docker run --name backend_test backend_test npm run lint
    - docker rm backend_test
    - docker rmi backend_test
  allow_failure: true


sonarqube:
  stage: quality_assurance
  image: sonarsource/sonar-scanner-cli
  tags:
    - docker-runner
  script:
    - sonar-scanner


trivy:
  stage: quality_assurance
  image: docker:stable
  tags:
    - docker-runner
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  script:
    - ./trivy image --exit-code 0 --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $CI_REGISTRY_IMAGE
    - ./trivy image --exit-code 0 --severity HIGH $CI_REGISTRY_IMAGE
    - ./trivy image --exit-code 1 --severity CRITICAL $CI_REGISTRY_IMAGE
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 1 week


registry:
  stage: registry
  image: docker
  services:
    - docker:dind
  tags:
    - docker-runner
  before_script: *docker-credentials
  script:
    - docker push $CI_REGISTRY_IMAGE

deploy:
  stage: deploy
  image: docker
  services:
    - docker:dind
  tags:
    - docker-runner
  before_script: *docker-credentials
  script:
    - docker stop tic-tac-toegether || true
    - docker rm tic-tac-toegether || true
    - docker pull $CI_REGISTRY_IMAGE
    - docker run -d -p 3000:3000 --name tic-tac-toegether $CI_REGISTRY_IMAGE

cleanup:
  stage: cleanup
  image: docker
  services:
    - docker:dind
  tags:
    - docker-runner
  script:
    - docker container prune -f
    - docker image prune -f
    - docker volume prune -f
    - docker builder prune -f
